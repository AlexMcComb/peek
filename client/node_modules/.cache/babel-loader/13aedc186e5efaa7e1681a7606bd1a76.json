{"ast":null,"code":"L.MapboxGL = L.Layer.extend({\n  options: {\n    updateInterval: 32\n  },\n  initialize: function initialize(options) {\n    L.setOptions(this, options);\n\n    if (options.accessToken) {\n      mapboxgl.accessToken = options.accessToken;\n    } else {\n      throw new Error('You should provide a Mapbox GL access token as a token option.');\n    }\n    /**\r\n    * Create a version of `fn` that only fires once every `time` millseconds.\r\n    *\r\n    * @param {Function} fn the function to be throttled\r\n    * @param {number} time millseconds required between function calls\r\n    * @param {*} context the value of `this` with which the function is called\r\n    * @returns {Function} debounced function\r\n    * @private\r\n    */\n\n\n    var throttle = function throttle(fn, time, context) {\n      var lock, args, wrapperFn, later;\n\n      later = function later() {\n        // reset lock and call if queued\n        lock = false;\n\n        if (args) {\n          wrapperFn.apply(context, args);\n          args = false;\n        }\n      };\n\n      wrapperFn = function wrapperFn() {\n        if (lock) {\n          // called too soon, queue to call later\n          args = arguments;\n        } else {\n          // call and lock until later\n          fn.apply(context, arguments);\n          setTimeout(later, time);\n          lock = true;\n        }\n      };\n\n      return wrapperFn;\n    }; // setup throttling the update event when panning\n\n\n    this._throttledUpdate = throttle(L.Util.bind(this._update, this), this.options.updateInterval);\n  },\n  onAdd: function onAdd(map) {\n    if (!this._glContainer) {\n      this._initContainer();\n    }\n\n    map._panes.tilePane.appendChild(this._glContainer);\n\n    this._initGL();\n\n    this._offset = this._map.containerPointToLayerPoint([0, 0]); // work around https://github.com/mapbox/mapbox-gl-leaflet/issues/47\n\n    if (map.options.zoomAnimation) {\n      L.DomEvent.on(map._proxy, L.DomUtil.TRANSITION_END, this._transitionEnd, this);\n    }\n  },\n  onRemove: function onRemove(map) {\n    if (this._map.options.zoomAnimation) {\n      L.DomEvent.off(this._map._proxy, L.DomUtil.TRANSITION_END, this._transitionEnd, this);\n    }\n\n    map.getPanes().tilePane.removeChild(this._glContainer);\n\n    this._glMap.remove();\n\n    this._glMap = null;\n  },\n  getEvents: function getEvents() {\n    return {\n      move: this._throttledUpdate,\n      // sensibly throttle updating while panning\n      zoomanim: this._animateZoom,\n      // applys the zoom animation to the <canvas>\n      zoom: this._pinchZoom,\n      // animate every zoom event for smoother pinch-zooming\n      zoomstart: this._zoomStart,\n      // flag starting a zoom to disable panning\n      zoomend: this._zoomEnd\n    };\n  },\n  _initContainer: function _initContainer() {\n    var container = this._glContainer = L.DomUtil.create('div', 'leaflet-gl-layer');\n\n    var size = this._map.getSize();\n\n    container.style.width = size.x + 'px';\n    container.style.height = size.y + 'px';\n  },\n  _initGL: function _initGL() {\n    var center = this._map.getCenter();\n\n    var options = L.extend({}, this.options, {\n      container: this._glContainer,\n      interactive: false,\n      center: [center.lng, center.lat],\n      zoom: this._map.getZoom() - 1,\n      attributionControl: false\n    });\n    this._glMap = new mapboxgl.Map(options); // allow GL base map to pan beyond min/max latitudes\n\n    this._glMap.transform.latRange = null;\n\n    if (this._glMap._canvas.canvas) {\n      // older versions of mapbox-gl surfaced the canvas differently\n      this._glMap._actualCanvas = this._glMap._canvas.canvas;\n    } else {\n      this._glMap._actualCanvas = this._glMap._canvas;\n    } // treat child <canvas> element like L.ImageOverlay\n\n\n    L.DomUtil.addClass(this._glMap._actualCanvas, 'leaflet-image-layer');\n    L.DomUtil.addClass(this._glMap._actualCanvas, 'leaflet-zoom-animated');\n  },\n  _update: function _update(e) {\n    // update the offset so we can correct for it later when we zoom\n    this._offset = this._map.containerPointToLayerPoint([0, 0]);\n\n    if (this._zooming) {\n      return;\n    }\n\n    var size = this._map.getSize(),\n        container = this._glContainer,\n        gl = this._glMap,\n        topLeft = this._map.containerPointToLayerPoint([0, 0]);\n\n    L.DomUtil.setPosition(container, topLeft);\n\n    var center = this._map.getCenter(); // gl.setView([center.lat, center.lng], this._map.getZoom() - 1, 0);\n    // calling setView directly causes sync issues because it uses requestAnimFrame\n\n\n    var tr = gl.transform;\n    tr.center = mapboxgl.LngLat.convert([center.lng, center.lat]);\n    tr.zoom = this._map.getZoom() - 1;\n\n    if (gl.transform.width !== size.x || gl.transform.height !== size.y) {\n      container.style.width = size.x + 'px';\n      container.style.height = size.y + 'px';\n\n      if (gl._resize !== null && gl._resize !== undefined) {\n        gl._resize();\n      } else {\n        gl.resize();\n      }\n    } else {\n      // older versions of mapbox-gl surfaced update publicly\n      if (gl._update !== null && gl._update !== undefined) {\n        gl._update();\n      } else {\n        gl.update();\n      }\n    }\n  },\n  // update the map constantly during a pinch zoom\n  _pinchZoom: function _pinchZoom(e) {\n    this._glMap.jumpTo({\n      zoom: this._map.getZoom() - 1,\n      center: this._map.getCenter()\n    });\n  },\n  // borrowed from L.ImageOverlay https://github.com/Leaflet/Leaflet/blob/master/src/layer/ImageOverlay.js#L139-L144\n  _animateZoom: function _animateZoom(e) {\n    var scale = this._map.getZoomScale(e.zoom),\n        offset = this._map._latLngToNewLayerPoint(this._map.getBounds().getNorthWest(), e.zoom, e.center);\n\n    L.DomUtil.setTransform(this._glMap._actualCanvas, offset.subtract(this._offset), scale);\n  },\n  _zoomStart: function _zoomStart(e) {\n    this._zooming = true;\n  },\n  _zoomEnd: function _zoomEnd() {\n    var scale = this._map.getZoomScale(this._map.getZoom()),\n        offset = this._map._latLngToNewLayerPoint(this._map.getBounds().getNorthWest(), this._map.getZoom(), this._map.getCenter());\n\n    L.DomUtil.setTransform(this._glMap._actualCanvas, offset.subtract(this._offset), scale);\n    this._zooming = false;\n  },\n  _transitionEnd: function _transitionEnd(e) {\n    L.Util.requestAnimFrame(function () {\n      var zoom = this._map.getZoom(),\n          center = this._map.getCenter(),\n          offset = this._map.latLngToContainerPoint(this._map.getBounds().getNorthWest()); // reset the scale and offset\n\n\n      L.DomUtil.setTransform(this._glMap._actualCanvas, offset, 1); // enable panning once the gl map is ready again\n\n      this._glMap.once('moveend', L.Util.bind(function () {\n        this._zoomEnd();\n      }, this)); // update the map position\n\n\n      this._glMap.jumpTo({\n        center: center,\n        zoom: zoom - 1\n      });\n    }, this);\n  }\n});\n\nL.mapboxGL = function (options) {\n  return new L.MapboxGL(options);\n};","map":null,"metadata":{},"sourceType":"script"}